ARG ALPINE_VERSION=3.16.2

FROM alpine:${ALPINE_VERSION}

# Root for GitHub, hardly likely to change for a long while...
ARG GITHUB_ROOT=https://github.com

# Build time arguments for where to look for the releases of cloudflared and the
# version to use.
ARG CLOUDFLARED_DOWNLOAD=${GITHUB_ROOT}/cloudflare/cloudflared/releases/download
ARG CLOUDFLARED_VERSION=2022.9.0


# Metadata
LABEL MAINTAINER=efrecon+github@gmail.com
LABEL org.opencontainers.image.title="sshd-cloudflared-base"
LABEL org.opencontainers.image.description="User-level SSHs tunnelled through cloudflare"
LABEL org.opencontainers.image.authors="Emmanuel Fr√©con <efrecon+github@gmail.com>"
LABEL org.opencontainers.image.url="$GITHUB_ROOT/efrecon/sshd-cloudflared"
LABEL org.opencontainers.image.documentation="$GITHUB_ROOT/efrecon/sshd-cloudflared/README.md"
LABEL org.opencontainers.image.source="$GITHUB_ROOT/efrecon/sshd-cloudflared"


# Install requirements for the script and the cloudflared binary at the
# requested version. We can now use curl for downloads. Also Install minimal
# init to place all child processes under our control. Note: we add bash even
# though this isn't required. This is so it can be provided through the `-s`
# option. gcompat facilitates running glibc binaries and is necessary for
# mounting the local docker client binary into the container. libstdc++, libgcc
# enable running the VS Code Remote Extension against this container.
RUN apk add --no-cache tini openssh curl jq bash && \
    case "$(uname -m)" in \
        "x86_64")   CLOUDFLARED_ARCH=amd64;; \
        "i686")     CLOUDFLARED_ARCH=386;; \
        "aarch64")  CLOUDFLARED_ARCH=arm64;; \
        "armv7l")   CLOUDFLARED_ARCH=arm;; \
    esac && \
    CLOUDFLARED_URL="${CLOUDFLARED_DOWNLOAD}/$CLOUDFLARED_VERSION/cloudflared-$(uname -s|tr '[:upper:]' '[:lower:]')-${CLOUDFLARED_ARCH}" && \
    printf "Downloading cloudflared binary release from: %s\n" "$CLOUDFLARED_URL" && \
    curl \
        --location \
        --silent \
        --show-error \
        --output /usr/local/bin/cloudflared \
        "$CLOUDFLARED_URL" && \
    chmod a+x /usr/local/bin/cloudflared

COPY sshd_config.tpl /usr/local/lib/
COPY entrypoint.sh /usr/local/bin

# Run behind tini, capturing the entire process group to properly teardown all
# subprocesses.
STOPSIGNAL SIGINT
ENTRYPOINT [ "/sbin/tini", "-wgv", "--", "/usr/local/bin/entrypoint.sh" ]
